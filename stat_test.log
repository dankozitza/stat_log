
[02:45:41] [stat_test] test message 1 using log.msg()
[02:45:41] [stat_test] test message 2 using log.msg(). testing return character \n in log.msg();
section of message after a return character.
HAHA and yet another return character!
[02:45:41] [stat_test] testing status.pass();
[02:45:41] [stat_log.h_test] [PASS] stat condition set to pass
[02:45:41] [stat_test] testing status.fail();
[02:45:41] [stat_log.h_test] [FAIL] stat condition set to fail
[02:45:41] [stat_test] testing status.pass("string");
[02:45:41] [PASS] [stat_log.h_test] stat condition set to pass
[02:45:41] [PASS] [msg] hey this is the message from the passing status!
[02:45:41] [stat_test] testing status.fail("string");
[02:45:41] [FAIL] [stat_log.h_test] stat condition set to fail
[02:45:41] [FAIL] [msg] hey this is the message from the failing status!
[02:45:41] [stat_test] testing status.fatal();
[02:45:41] [stat_log.h_test] [FATAL] !!! generic fatal error!
[02:45:41] [stat_test] testing status.is_pass()
[02:45:41] [stat_test] status object is not in passing condition
[02:45:41] [stat_test] testing return value from status.pass("message");
[02:45:41] [PASS] [stat_log.h_test] stat condition set to pass
[02:45:41] [PASS] [msg] setting the status object to pass
[02:45:41] [stat_test] stat.pass returned 1!
[02:45:41] [stat_test] testing newline character \n in stat.fail("message");
[02:45:41] [FAIL] [stat_log.h_test] stat condition set to fail
[02:45:41] [FAIL] [msg] this is the message before the newline
this is the message after the newline
[02:45:41] [stat_test] testing newline character \n in stat.pass("message");
[02:45:41] [PASS] [stat_log.h_test] stat condition set to pass
[02:45:41] [PASS] [msg] message message message
message message message
this is the message bro
[02:45:41] [msg] testing log.msg() using default configuration
yup. testing that.
[02:45:41] [stat_test] testing test_subroutine
[02:45:41] [stat_test::test_sub] this is the test subroutine
[02:45:41] [stat_test::test_sub] returning stat.pass("message")
[02:45:41] [PASS] [stat_test::test_sub] stat condition set to pass
[02:45:41] [PASS] [msg] test_subroutine() had successful test run

[02:47:54] [stat_test] test message 1 using log.msg()
[02:47:54] [stat_test] test message 2 using log.msg(). testing return character \n in log.msg();
section of message after a return character.
HAHA and yet another return character!
[02:47:54] [stat_test] testing status.pass();
[02:47:54] [stat_log.h_test] [PASS] stat condition set to pass
[02:47:54] [stat_test] testing status.fail();
[02:47:54] [stat_log.h_test] [FAIL] stat condition set to fail
[02:47:54] [stat_test] testing status.pass("string");
[02:47:54] [PASS] [stat_log.h_test] stat condition set to pass
[02:47:54] [PASS] [msg] hey this is the message from the passing status!
[02:47:54] [stat_test] testing status.fail("string");
[02:47:54] [FAIL] [stat_log.h_test] stat condition set to fail
[02:47:54] [FAIL] [msg] hey this is the message from the failing status!
[02:47:54] [stat_test] testing status.fatal();
[02:47:54] [stat_log.h_test] [FATAL] !!! generic fatal error!
[02:47:54] [stat_test] testing status.is_pass()
[02:47:54] [stat_test] status object is not in passing condition
[02:47:54] [stat_test] testing return value from status.pass("message");
[02:47:54] [PASS] [stat_log.h_test] stat condition set to pass
[02:47:54] [PASS] [msg] setting the status object to pass
[02:47:54] [stat_test] stat.pass returned 1!
[02:47:54] [stat_test] testing newline character \n in stat.fail("message");
[02:47:54] [FAIL] [stat_log.h_test] stat condition set to fail
[02:47:54] [FAIL] [msg] this is the message before the newline
this is the message after the newline
[02:47:54] [stat_test] testing newline character \n in stat.pass("message");
[02:47:54] [PASS] [stat_log.h_test] stat condition set to pass
[02:47:54] [PASS] [msg] message message message
message message message
this is the message bro
[02:47:54] [msg] testing log.msg() using default configuration
yup. testing that.
[02:47:54] [stat_test] testing test_subroutine
[02:47:54] [stat_test::test_sub] this is the test subroutine
[02:47:54] [stat_test::test_sub] returning stat.pass("message")
[02:47:54] [PASS] [stat_test::test_sub] stat condition set to pass
[02:47:54] [PASS] [msg] test_subroutine() had successful test run


[02:47:54] [stat_test] test_subroutine returned 1!


